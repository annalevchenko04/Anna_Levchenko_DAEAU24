-- Step 1: Create Parent Table with Declarative Partitioning
CREATE TABLE SALES_INFO_DP (
    id INTEGER,
    category VARCHAR(1),
    ischeck BOOLEAN,
    eventdate DATE
) PARTITION BY RANGE (eventdate);

-- Step 2: Create Child Tables with Range Partitioning
CREATE TABLE SALES_INFO_DP_2021 PARTITION OF SALES_INFO_DP
    FOR VALUES FROM ('2021-01-01') TO ('2022-01-01') PARTITION BY LIST (category);
CREATE TABLE SALES_INFO_DP_2022 PARTITION OF SALES_INFO_DP
    FOR VALUES FROM ('2022-01-01') TO ('2023-01-01') PARTITION BY LIST (category);
CREATE TABLE SALES_INFO_DP_2023 PARTITION OF SALES_INFO_DP
    FOR VALUES FROM ('2023-01-01') TO ('2024-01-01') PARTITION BY LIST (category);
CREATE TABLE SALES_INFO_DP_2025 PARTITION OF SALES_INFO_DP
    FOR VALUES FROM ('2025-01-01') TO ('2026-01-01') PARTITION BY LIST (category);

-- Step 3: Create List Partitions for Categories
CREATE TABLE SALES_INFO_DP_2021_A PARTITION OF SALES_INFO_DP_2021
    FOR VALUES IN ('A','B','C','D','E');
CREATE TABLE SALES_INFO_DP_2021_F PARTITION OF SALES_INFO_DP_2021
    FOR VALUES IN ('F','G','H','I','J','K');
CREATE TABLE SALES_INFO_DP_2021_DEFAULT PARTITION OF SALES_INFO_DP_2021 DEFAULT;

CREATE TABLE SALES_INFO_DP_2022_A PARTITION OF SALES_INFO_DP_2022
    FOR VALUES IN ('A','B','C','D','E');
CREATE TABLE SALES_INFO_DP_2022_F PARTITION OF SALES_INFO_DP_2022
    FOR VALUES IN ('F','G','H','I','J','K');
CREATE TABLE SALES_INFO_DP_2022_DEFAULT PARTITION OF SALES_INFO_DP_2022 DEFAULT;

CREATE TABLE SALES_INFO_DP_2025_A PARTITION OF SALES_INFO_DP_2025
    FOR VALUES IN ('A','B','C','D','E');
CREATE TABLE SALES_INFO_DP_2025_F PARTITION OF SALES_INFO_DP_2025
    FOR VALUES IN ('F','G','H','I','J','K');
CREATE TABLE SALES_INFO_DP_2025_DEFAULT PARTITION OF SALES_INFO_DP_2025 DEFAULT;

-- Step 4: Insert Data
INSERT INTO SALES_INFO_DP(id, category, ischeck, eventdate)
SELECT id,
    ('{"A","B","C","D","E","F","J","H","I","J","K"}'::text[])[((RANDOM())*10)::INTEGER] category,
    ((1*(RANDOM())::INTEGER) < 1) ischeck,
    (NOW() - INTERVAL '10 day' * (RANDOM()::int * 100))::DATE eventdate
FROM generate_series(1,1000000) id;

-- Step 5: Update Some Rows
UPDATE SALES_INFO_DP SET category = 'X' WHERE category = 'A' AND eventdate BETWEEN '2022-01-01' AND '2022-12-31';

--Step 6: Query Performance Comparisons
EXPLAIN ANALYZE SELECT * FROM SALES_INFO_DP;
EXPLAIN ANALYZE SELECT * FROM SALES_INFO_SIMPLE;
EXPLAIN ANALYZE SELECT * FROM SALES_INFO_DP WHERE eventdate BETWEEN '2022-06-01' AND '2022-12-31';
EXPLAIN ANALYZE SELECT * FROM SALES_INFO_DP WHERE eventdate = '2022-07-15';
EXPLAIN ANALYZE SELECT * FROM SALES_INFO_DP WHERE category = 'A';
EXPLAIN ANALYZE SELECT * FROM SALES_INFO_DP WHERE category IN ('A','B','C');
EXPLAIN ANALYZE SELECT * FROM SALES_INFO_DP WHERE category IN ('A','B','C') AND eventdate = '2022-07-15';
EXPLAIN ANALYZE SELECT COUNT(*) FROM SALES_INFO_DP;
EXPLAIN ANALYZE SELECT COUNT(*) FROM SALES_INFO_DP WHERE eventdate BETWEEN '2022-01-01' AND '2022-12-31';

-- Step 7: Split and Merge Partitions
ALTER TABLE SALES_INFO_DP_2022 DETACH PARTITION SALES_INFO_DP_2022_A;
CREATE TABLE SALES_INFO_DP_2022_A1 PARTITION OF SALES_INFO_DP_2022 FOR VALUES IN ('A','B','C');
CREATE TABLE SALES_INFO_DP_2022_A2 PARTITION OF SALES_INFO_DP_2022 FOR VALUES IN ('D','E');

-- Step 8: Revert Partitioning
ALTER TABLE SALES_INFO_DP_2022 DETACH PARTITION SALES_INFO_DP_2022_A1;
ALTER TABLE SALES_INFO_DP_2022 DETACH PARTITION SALES_INFO_DP_2022_A2;
DROP TABLE SALES_INFO_DP_2022_A1;
DROP TABLE SALES_INFO_DP_2022_A2;
DROP TABLE IF EXISTS SALES_INFO_DP_2022_A;
CREATE TABLE SALES_INFO_DP_2022_A PARTITION OF SALES_INFO_DP_2022 FOR VALUES IN ('A', 'B', 'C', 'D', 'E');
